name: Rust

on:
  pull_request:
    paths:
    - '**'
    - '!/*.md'
    - '!/doc/**'
    - "!/LICENSE"
    
  push:
    branches:
    - main
    paths:
    - '**'
    - '!/*.md'
    - '!/doc/**'
    - "!/LICENSE"
    
  schedule:
  - cron: '12 12 12 * *'

jobs:
  pipeline:
    name: Pipeline
    needs: [test, docs, rustfmt, clippy, publish]
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: exit 0

  test:
    name: Test
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        rust: ["stable", "beta"]
    continue-on-error: ${{ matrix.rust != 'stable' }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        
    - uses: Swatinem/rust-cache@v1
      
    - name: Build
      run: cargo build --workspace --all-features
      
    - name: Test with default features
      run: cargo test --workspace
      
    - name: Test with all features
      run: cargo test --workspace --all-features
      
    - name: Test with no default features
      run: cargo test --workspace --no-default-features


  docs:
    name: Document generation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - uses: Swatinem/rust-cache@v1
      
    - name: Check documentation
      env:
        RUSTDOCFLAGS: -D warnings
      run: cargo doc --workspace --all-features --no-deps

      
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt
      
    - name: Check formatting
      run: cargo fmt --all -- --check

      
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: clippy
      
    - uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --workspace --all-features --all-targets -- -D warnings --allow deprecated



  publish:
    name: Publish (dry-run)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - uses: Swatinem/rust-cache@v1
      
    - name: Check publish
      run: cargo publish --dry-run --all-features
